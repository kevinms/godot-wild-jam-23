[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
//render_mode unshaded;

//time_scale is a uniform float
const float time_scale = 10.0;
const float side_to_side = 1.0;
uniform vec3 impact_site;

const vec3 core = vec3(0);
const float max_dist = 1.3;
const float wave_scale = 0.2;

const float PI = 3.14159265358979323846;

void vertex() {
	float time = TIME * time_scale;
	//side_to_side is a uniform float
	//VERTEX.x += cos(time) * side_to_side;
	//VERTEX.y += cos(VERTEX.x) * sin(VERTEX.z);
	
	float dist = length(impact_site - VERTEX);
	COLOR.xyz = vec3(dist / 2.0);
	//COLOR.xyz = vec3(1.0,0.0,0.0);
	
	vec3 ray = VERTEX - core;
	if (dist < max_dist) {
		float linear_falloff = 1.0 - (dist / max_dist);
		float x = mix(0, 6.0*PI, dist);
		//float amplitude = 0.04 * linear_falloff;
		float amplitude = 0.04;
		VERTEX = core + ray + (normalize(ray) * sin(x-(PI/2.0)-time) *  amplitude);
	}
}

void fragment(){
	ALBEDO = COLOR.xyz;
}"

[resource]
shader = SubResource( 2 )
shader_param/impact_site = Vector3( 1, 0, 0 )
