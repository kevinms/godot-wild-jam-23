[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
//render_mode unshaded;
//world_vertex_coords

uniform vec3 albedo;

//time_scale is a uniform float
const float time_scale = 20.0;
const float side_to_side = 1.0;
uniform vec3 impact_site;

uniform float global_time;
uniform vec3 site0;
uniform vec3 site1;
uniform vec3 site2;
uniform vec3 site3;
uniform vec3 site4;
uniform vec3 site5;
uniform vec3 site6;
uniform vec3 site7;
uniform vec3 site8;
uniform vec3 site9;
uniform float start_time_0;
uniform float start_time_1;
uniform float start_time_2;
uniform float start_time_3;
uniform float start_time_4;
uniform float start_time_5;
uniform float start_time_6;
uniform float start_time_7;
uniform float start_time_8;
uniform float start_time_9;

//uniform float start_time;
uniform float strength;

const float planet_scale = 5.0;

const vec3 core = vec3(0);
//const float max_dist = 1.3 * planet_scale;
const float max_dist = 2.0 * planet_scale;
const float wave_scale = 0.2 * planet_scale;

const float PI = 3.14159265358979323846;

const float effect_length_sec = 1.0 * time_scale;

vec3 wave(vec3 vertex, vec3 site, float time, float start_time) {
	float dist = length(site - vertex);
	//COLOR.xyz = vec3(dist / 2.0);
	
	vec3 ray = vertex - core;
	if (dist < max_dist) {
		float normalized_dist = dist / max_dist;
		float linear_falloff = 1.0 - normalized_dist;
		
		// We want 3 periods (2*PI * 3) of the sine wave to be distrubted over the max distance
		float x = mix(0, 6.0*PI, normalized_dist);
		
		// Amplitude of wave and some falloff so by the end of the way it's a lot smaller
		float amplitude = wave_scale * linear_falloff;
		
		// Amplitude is also modulated by the time since the start time - wave start small, then large, then end small
		float elapsed = clamp(time - start_time, 0, effect_length_sec);
		// Use a sin() function from 0 to PI to start small and end small
		// so map the elapsed time to between [0, PI]
		float time_falloff = mix(0, PI, elapsed / effect_length_sec);
		amplitude *= sin(time_falloff);
		
		//float amplitude = 0.04;
		//vertex = core + ray + (normalize(ray) * sin(x-(PI/2.0)-time) *  amplitude);
		
		// return displacement
		return normalize(ray) * sin(x-(PI/2.0)-time) *  amplitude;
	}
	
	return vec3(0);
}

void vertex() {
	float time = TIME * time_scale;
	/*
	float dist0 = length(site0 - VERTEX);
	VERTEX = wave(VERTEX, site0, time, start_time_0 * time_scale);
	COLOR.xyz = vec3(dist0 / 2.0);
	*/
	
	vec3 disp = wave(VERTEX, site0, time, start_time_0 * time_scale);
	disp + wave(VERTEX, site1, time, start_time_1 * time_scale);
	disp += wave(VERTEX, site2, time, start_time_2 * time_scale);
	disp += wave(VERTEX, site3, time, start_time_3 * time_scale);
	disp += wave(VERTEX, site4, time, start_time_4 * time_scale);
	disp += wave(VERTEX, site5, time, start_time_5 * time_scale);
	disp += wave(VERTEX, site6, time, start_time_6 * time_scale);
	disp += wave(VERTEX, site7, time, start_time_7 * time_scale);
	disp += wave(VERTEX, site8, time, start_time_8 * time_scale);
	disp += wave(VERTEX, site9, time, start_time_9 * time_scale);
	
	vec3 ray = VERTEX - core;
	VERTEX = core + ray + disp;
	
	COLOR.xyz = albedo;
	
	//side_to_side is a uniform float
	//VERTEX.x += cos(time) * side_to_side;
	//VERTEX.y += cos(VERTEX.x) * sin(VERTEX.z);
	/*
	float dist = length(impact_site - VERTEX);
	COLOR.xyz = vec3(dist / 2.0);
	//COLOR.xyz = vec3(1.0,0.0,0.0);
	
	vec3 ray = VERTEX - core;
	if (dist < max_dist) {
		float linear_falloff = 1.0 - (dist / max_dist);
		float x = mix(0, 6.0*PI, dist);
		//float amplitude = 0.04 * linear_falloff;
		float amplitude = 0.04;
		VERTEX = core + ray + (normalize(ray) * sin(x-(PI/2.0)-time) *  amplitude);
	}
	*/
}

void fragment(){
	// Shinier
	ALBEDO = COLOR.xyz;
	ROUGHNESS = 0.5;
	METALLIC = 0.5;
	
	// Flatter
	//ALBEDO = COLOR.xyz;
	//ROUGHNESS = 1.0;
	//METALLIC = 0.5;
	
}"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Vector3( 0.8, 0, 0 )
shader_param/impact_site = Vector3( 1, 0, 0 )
shader_param/global_time = null
shader_param/site0 = Vector3( 1, 0, 0 )
shader_param/site1 = Vector3( 0, 0, 0 )
shader_param/site2 = null
shader_param/site3 = null
shader_param/site4 = null
shader_param/site5 = null
shader_param/site6 = null
shader_param/site7 = null
shader_param/site8 = null
shader_param/site9 = null
shader_param/start_time_0 = null
shader_param/start_time_1 = null
shader_param/start_time_2 = null
shader_param/start_time_3 = null
shader_param/start_time_4 = null
shader_param/start_time_5 = null
shader_param/start_time_6 = null
shader_param/start_time_7 = null
shader_param/start_time_8 = null
shader_param/start_time_9 = null
shader_param/strength = 1.0
